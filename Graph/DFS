#include<iostream>
#include<unordered_map>
#include<vector>
#include<list>
#include<stack>
using namespace std;

class graph{
public:
    unordered_map<int, list<int >> adj;

    void addEdge(int u, int v, bool direction){
        // direction = 0 -> undirected
        //direction = 1 -> directed graph

        //create an edge from u to v

        adj[u].push_back(v);
        if(direction == 0){
            adj[v].push_back(u);
        }
    }
    void printAdjList(){
        for(auto i : adj) {
            cout<< i.first << "->";
            for(auto j : i.second){
                cout<< j << ",";
            }
            cout<< endl;
        }
    }

    void dfs(int node, unordered_map<int, bool> &visited, unordered_map<int, list<int>> &adj, vector<int> &component){
        component.push_back(node);
        visited[node] = true;

        //hr child call krna hai
        for(auto i: adj[node]){
            if( !visited[i]){
                dfs(i, visited, adj, component);
            }
        }
    }
    
    vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int >> & edges){
        //prepare adjacency list
        unordered_map<int , list<int>> adj;
        for(int i=0; i<edges.size(); i++){
            int u = edges[i][0];
            int v = edges[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<vector<int >> ans;

        //for handling disconnected components
        
        unordered_map<int , bool> visited;
        //for all nodes call dfs, if not visited
        for(int i=0; i< V; i++){
            if( !visited[i]){
                vector<int> component;
                dfs(i, visited, adj, component);
                ans.push_back(component);
            }
        }
        return ans;
    }
   
    
};